# @package _global_
#package global is neccessary!
defaults:
  - override /datamodule: HSN.yaml
  - override /module: multilabel.yaml
  - override /module/network: resnet.yaml
  - override /callbacks: default.yaml
  - override /trainer: single_gpu.yaml
  - override /datamodule/transforms: bird_default_multilabel.yaml
  - override /paths: default.yaml
  - override /hydra: default.yaml
  - override /datamodule/transforms/waveform_augmentations: none.yaml
  - override /datamodule/transforms/spectrogram_augmentations: none.yaml

tags: ["HSN", "resnet", "multilabel"]
seed: 2
train: True
test: False

logger:
  wandb:
    tags: ${tags}
    group: "XCM_train_resnet"
    mode: online

module:
  #class_weights_loss: Null
  optimizer:
    _target_: torch.optim.AdamW
    lr: 5e-4
    weight_decay: 5e-4
  loss:
    #  _target_: src.modules.losses.asymmetric_loss.AsymmetricLossMultiLabel
    # _target_: torch.nn.BCEWithLogitsLoss 
    _target_: modules.losses.focal_loss.MultiLabelFocalLoss

  network: 
    torch_compile: True

trainer:
  min_epochs: 1
  max_epochs: 50

datamodule:
  dataset:
    val_split: 0.2
    class_weights_loss: null
    class_weights_sampler: null
    classlimit: 600
    eventlimit: 3
    
  loaders:
    train:
      batch_size: 128
      shuffle: True
      num_workers: 32
      drop_last: True
    valid:
      batch_size: 128
      num_workers: 32
      shuffle: False
    test:
      batch_size: 128
      num_workers: 32
      shuffle: False

  mapper: 
    biggest_cluster: True
    no_call: False
  
callbacks:
  model_checkpoint:
    monitor: val/MultiLabelFocalLoss
    save_last: True
    every_n_epochs: 3
  early_stopping:
    target_: lightning.pytorch.callbacks.EarlyStopping
    monitor: "val/cmAP"
    patience: 4
    min_delta: 5e-2
    verbose: False
    check_finite: True